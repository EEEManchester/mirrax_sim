#!/usr/bin/env python

""" Script to move robot joints into a pre-defined position
	the position is not held unless physics engine is paused
"""

import rospy, sys
import string
import warnings
from math import pi
from termcolor import colored
import numpy as np
import argparse

from gazebo_msgs.srv import *
from gazebo_ros import gazebo_interface
from std_srvs.srv import Empty
from gazebo_msgs.msg import ModelState
from geometry_msgs.msg import Pose
from geometry_msgs.msg import Twist
from std_msgs.msg import Float64
import tf

JOINT_NAME 	  = [None]*5
JOINT_NAME[0] = 'arm_1_pivot'
JOINT_NAME[1] = 'arm_2_pivot'
JOINT_NAME[2] = 'arm_3_pivot'
JOINT_NAME[3] = 'joint_5'
JOINT_NAME[4] = 'joint_6'

def check_physics_running():
	""" Select type of controllers depending on whether joint controller running """
	""" NOTE: DOES NOT WORK, SERVICE MD5SUM ERROR """

	rospy.wait_for_service("/gazebo/get_physics_properties", 0.5)
	try:
		check_serv_ = rospy.ServiceProxy("/gazebo/get_physics_properties", Empty)
		resp = check_serv_()
	except rospy.ServiceException, e:
		print "Service call failed: %s"%e
	return resp.pause

def check_controllers_exists():
	""" Check if controllers has been loaded """
	
	rospy.wait_for_service("/mirrax/controller_manager/list_controllers", 0.5)
	try:
		check_serv_ = rospy.ServiceProxy("/mirrax/controller_manager/list_controllers", Empty)
		resp = check_serv_()
	except rospy.ServiceException, e:
		print "Service call failed: %s"%e
	print resp.pause

class RobotPose:
	def __init__(self):
		rospy.init_node('PoseModifier') 		# Initialises node

		self.model_name = 'mirrax'
		self.reference_frame = 'world'
		self.joint_pub_ = {}

		self.initialise_topics()

	def initialise_topics(self):
		for i in range(0,len(JOINT_NAME)):
			self.joint_pub_[i]  = rospy.Publisher(self.model_name + '/' + JOINT_NAME[i] + '/command', Float64, queue_size=1)
		
	def set_full_pose(self, qb, q):
		
		self.set_joint_pose(q)
		self.set_body_pose(qb)
		self.set_joint_pose(q)

		print 'Robot Pose Set!'

	def set_joint_pose(self, q):
		""" Set joint position - method depends whether simulator active """
		# Publish joint states
		# if check_physics_running():
		if rospy.has_param('/mirrax/controller_available'):
			print 'Setting joints via topics'
			for c in range(0,3):
				for j in range(0,len(JOINT_NAME)):
					self.joint_pub_[j].publish(q[j])
				rospy.sleep(0.4)
		else:
			print 'Setting joints via service'
			rospy.wait_for_service('%s/set_model_configuration'%('/gazebo'))
			for i in range(0,3):
				try:
					param_name = 'robot_description'
					success = gazebo_interface.set_model_configuration_client(self.model_name, param_name, 
			                                                                  JOINT_NAME, q, '/gazebo')
					print 'SetJointState:', success
					rospy.set_param(self.model_name + '/standing', True)
				except rospy.ServiceException, e:
					print "set model configuration service call failed: %s"%e
				rospy.sleep(0.5)
		
	def set_body_pose(self, qb):
		# Define variables
		model_state = ModelState()
		pose  		= Pose()
		twist 		= Twist()

		pose.position.x		= qb[0]#pose_x
		pose.position.y		= qb[1]#pose_y
		pose.position.z		= qb[2]#pose_z
		roll 				= qb[3]#pose_roll
		pitch 			= qb[4]#pose_pitch
		yaw 				= qb[5]#pose_yaw
		quaternion 			= tf.transformations.quaternion_from_euler(roll, pitch, yaw)
		pose.orientation.x	= quaternion[0]
		pose.orientation.y	= quaternion[1]
		pose.orientation.z	= quaternion[2]
		pose.orientation.w	= quaternion[3]

		model_state.model_name 		= self.model_name
		model_state.reference_frame = self.reference_frame
		model_state.pose 			= pose

		gazebo_namespace = '/gazebo'

		try:
			rospy.wait_for_service('%s/set_model_state'%(gazebo_namespace), 2)
			set_model_state = rospy.ServiceProxy('%s/set_model_state'%(gazebo_namespace), SetModelState)
			# rospy.loginfo("Calling service %s/set_model_state"%gazebo_namespace)
			resp = set_model_state(model_state)
			# rospy.loginfo("Set model state status: %s"%resp.status_message)
			print resp.status_message

		except rospy.ServiceException as e:
			print("Service call failed: %s" % e)
		except rospy.ROSException as e:
			# Gazebo inactive
			print("Service call failed: %s" % e)

def parse_arguments():
	# Set up argument parser
	parser = argparse.ArgumentParser(description='Python test script.')
	# Base pose
	parser.add_argument("-x", "--base_x", type=float, default=0., help="base pose x")
	parser.add_argument("-y", "--base_y", type=float, default=0., help="base pose y")
	parser.add_argument("-z", "--base_z", type=float, default=0., help="base pose z")
	parser.add_argument("-qr", "--base_roll", type=float, default=0., help="base roll")
	parser.add_argument("-qp", "--base_pitch", type=float, default=0., help="base pitch")
	parser.add_argument("-qy", "--base_yaw", type=float, default=0., help="base yaw")
	# Motion
	parser.add_argument("-m", "--motion", type=str, default="normal", help="type of motion")
	# Delay
	parser.add_argument("-t", "--delay", type=float, default=0., help="time delay")
	# Parse arguments
	arg, unknown = parser.parse_known_args()
	return vars(arg)

if __name__ == "__main__":
	# check_physics_running()
	# check_controllers_exists()
	
	r_ = RobotPose()
	arg = parse_arguments()
	
	pose_x = arg["base_x"]
	pose_y = arg["base_y"]
	pose_z = arg["base_z"]
	pose_roll 	= arg["base_roll"]
	pose_pitch 	= arg["base_pitch"]
	pose_yaw 	= arg["base_yaw"]
	motion = arg["motion"]
	sleep_time = arg["delay"]
	
	rospy.sleep(sleep_time)
	
	## Select default joints
	if motion == 'default':
		pose_x = 0.0
		pose_y = 0.0
		pose_z = 0.1
		qd = [0.0]*5
 	elif motion == 'machine':
		pose_x = 1.85
		pose_y = 5.8
		pose_z = 0.17
		qd = [0.0]*5
	else:
		pose_x = 0.0
		pose_y = 0.
		pose_z = 0.1
		qd = [0.0]*5

	qb = [pose_x, pose_y, pose_z, pose_roll, pose_pitch, pose_yaw]
	
	print colored("Moving robot to " + motion + " pose ...", 'green')
	r_.set_full_pose([0.,0.,0.7,0.,0.,0.], qd)
	r_.set_full_pose(qb, qd)
